content='from django.db import models\nfrom django.contrib.auth import get_user_model\nfrom django.utils import timezone\nfrom django.core.exceptions import ValidationError\nimport uuid\n\nUser = get_user_model()\n\n\nclass NotificationManager(models.Manager):\n    """Custom manager for Notification model."""\n    \n    def unread(self):\n        """Get all unread notifications."""\n        return self.filter(is_read=False)\n    \n    def read(self):\n        """Get all read notifications."""\n        return self.filter(is_read=True)\n    \n    def for_user(self, user):\n        """Get notifications for a specific user."""\n        return self.filter(recipient=user)\n    \n    def mark_all_read(self, user):\n        """Mark all notifications as read for a user."""\n        return self.filter(recipient=user, is_read=False).update(\n            is_read=True,\n            read_at=timezone.now()\n        )\n\n\nclass NotificationType(models.Model):\n    """Model for notification types/categories."""\n    \n    name = models.CharField(max_length=100, unique=True)\n    display_name = models.CharField(max_length=200)\n    description = models.TextField(blank=True)\n    icon = models.CharField(max_length=50, blank=True)\n    color = models.CharField(max_length=20, default=\'primary\')\n    is_active = models.BooleanField(default=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    \n    class Meta:\n        db_table = \'notification_types\'\n        verbose_name = \'Notification Type\'\n        verbose_name_plural = \'Notification Types\'\n        ordering = [\'name\']\n    \n    def __str__(self):\n        return self.display_name\n    \n    def clean(self):\n        """Validate notification type data."""\n        if not self.name.replace(\'_\', \'\').isalnum():\n            raise ValidationError(\'Name must contain only alphanumeric characters and underscores\')\n\n\nclass Notification(models.Model):\n    """Model for user notifications."""\n    \n    PRIORITY_CHOICES = [\n        (\'low\', \'Low\'),\n        (\'medium\', \'Medium\'),\n        (\'high\', \'High\'),\n        (\'urgent\', \'Urgent\'),\n    ]\n    \n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    recipient = models.ForeignKey(\n        User,\n        on_delete=models.CASCADE,\n        related_name=\'notifications\'\n    )\n    notification_type = models.ForeignKey(\n        NotificationType,\n        on_delete=models.CASCADE,\n        related_name=\'notifications\'\n    )\n    title = models.CharField(max_length=200)\n    message = models.TextField()\n    data = models.JSONField(default=dict, blank=True)\n    priority = models.CharField(\n        max_length=10,\n        choices=PRIORITY_CHOICES,\n        default=\'medium\'\n    )\n    is_read = models.BooleanField(default=False)\n    read_at = models.DateTimeField(null=True, blank=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    expires_at = models.DateTimeField(null=True, blank=True)\n    \n    # Action-related fields\n    action_url = models.URLField(blank=True)\n    action_label = models.CharField(max_length=50, blank=True)\n    \n    # Tracking fields\n    clicked = models.BooleanField(default=False)\n    clicked_at = models.DateTimeField(null=True, blank=True)\n    \n    objects = NotificationManager()\n    \n    class Meta:\n        db_table = \'notifications\'\n        verbose_name = \'Notification\'\n        verbose_name_plural = \'Notifications\'\n        ordering = [\'-created_at\']\n        indexes = [\n            models.Index(fields=[\'recipient\', \'is' additional_kwargs={} response_metadata={'id': 'msg_01CPDK8UWcrBT2syyRbqRxFu', 'model': 'claude-sonnet-4-20250514', 'stop_reason': 'max_tokens', 'stop_sequence': None, 'usage': {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 401, 'output_tokens': 1024, 'service_tier': 'standard'}} id='run--e0fa33dd-ec76-4ef2-b6d3-c1774ad5da5e-0' usage_metadata={'input_tokens': 401, 'output_tokens': 1024, 'total_tokens': 1425, 'input_token_details': {'cache_read': 0, 'cache_creation': 0}}
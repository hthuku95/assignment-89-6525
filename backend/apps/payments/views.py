content='import logging\nimport stripe\nfrom decimal import Decimal\nfrom django.conf import settings\nfrom django.http import HttpResponse\nfrom django.views.decorators.csrf import csrf_exempt\nfrom django.views.decorators.http import require_http_methods\nfrom django.utils.decorators import method_decorator\nfrom rest_framework import status\nfrom rest_framework.decorators import api_view, permission_classes\nfrom rest_framework.permissions import IsAuthenticated\nfrom rest_framework.response import Response\nfrom rest_framework.views import APIView\nfrom django.contrib.auth import get_user_model\nfrom django.shortcuts import get_object_or_404\nfrom django.db import transaction\nfrom django.core.exceptions import ValidationError\n\nfrom apps.orders.models import Order\nfrom apps.cart.models import Cart\nfrom .models import Payment, PaymentIntent\nfrom .serializers import PaymentIntentSerializer, PaymentSerializer\nfrom .services import PaymentService\nfrom .exceptions import PaymentProcessingError\n\nUser = get_user_model()\nlogger = logging.getLogger(__name__)\n\n# Initialize Stripe\nstripe.api_key = settings.STRIPE_SECRET_KEY\n\n\nclass CreatePaymentIntentView(APIView):\n    """\n    Create a Stripe PaymentIntent for processing payment\n    """\n    permission_classes = [IsAuthenticated]\n\n    def post(self, request):\n        try:\n            user = request.user\n            cart = get_object_or_404(Cart, user=user)\n            \n            if not cart.items.exists():\n                return Response(\n                    {\'error\': \'Cart is empty\'}, \n                    status=status.HTTP_400_BAD_REQUEST\n                )\n\n            # Calculate total amount\n            total_amount = cart.get_total_price()\n            amount_cents = int(total_amount * 100)  # Convert to cents\n\n            # Create payment intent with Stripe\n            payment_intent = stripe.PaymentIntent.create(\n                amount=amount_cents,\n                currency=\'usd\',\n                metadata={\n                    \'user_id\': user.id,\n                    \'cart_id\': cart.id,\n                }\n            )\n\n            # Save payment intent to database\n            payment_intent_obj = PaymentIntent.objects.create(\n                user=user,\n                stripe_payment_intent_id=payment_intent.id,\n                amount=total_amount,\n                currency=\'usd\',\n                status=\'requires_payment_method\',\n                cart=cart\n            )\n\n            serializer = PaymentIntentSerializer(payment_intent_obj)\n            \n            return Response({\n                \'client_secret\': payment_intent.client_secret,\n                \'payment_intent\': serializer.data\n            }, status=status.HTTP_201_CREATED)\n\n        except stripe.error.StripeError as e:\n            logger.error(f"Stripe error creating payment intent: {str(e)}")\n            return Response(\n                {\'error\': \'Payment service error\'}, \n                status=status.HTTP_500_INTERNAL_SERVER_ERROR\n            )\n        except Exception as e:\n            logger.error(f"Error creating payment intent: {str(e)}")\n            return Response(\n                {\'error\': \'Internal server error\'}, \n                status=status.HTTP_500_INTERNAL_SERVER_ERROR\n            )\n\n\nclass ConfirmPaymentView(APIView):\n    """\n    Confirm payment and create order\n    """\n    permission_classes = [IsAuthenticated]\n\n    def post(self, request):\n        try:\n            payment_intent_id = request.data.get(\'payment_intent_id\')\n            \n            if not payment_intent_id:\n                return Response(\n                    {\'error\': \'Payment intent ID is required\'}, \n                    status=status.HTTP_400_BAD_REQUEST\n                )\n\n            # Get payment intent from database\n            payment_intent_obj = get_object_or_404(\n                PaymentIntent, \n                stripe_payment_intent_id=payment_intent_id,\n                user=request.user\n            )\n\n            # Retrieve payment intent from Stripe\n            stripe_payment_intent = stripe.PaymentIntent.retrieve(payment_intent_id)\n\n            if stripe_payment_intent.status != \'succeeded\':\n                return Response(\n                    {\'error\': \'Payment has not succeede' additional_kwargs={} response_metadata={'id': 'msg_01YPSiryNLyzQaTBKom3AUxX', 'model': 'claude-sonnet-4-20250514', 'stop_reason': 'max_tokens', 'stop_sequence': None, 'usage': {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 401, 'output_tokens': 1024, 'service_tier': 'standard'}} id='run--73b62480-f422-4a4d-a2dc-e2c1b1d7527a-0' usage_metadata={'input_tokens': 401, 'output_tokens': 1024, 'total_tokens': 1425, 'input_token_details': {'cache_read': 0, 'cache_creation': 0}}
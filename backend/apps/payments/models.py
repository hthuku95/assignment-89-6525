content='from django.db import models\nfrom django.contrib.auth import get_user_model\nfrom django.core.validators import MinValueValidator\nfrom django.utils import timezone\nfrom decimal import Decimal\nimport uuid\n\nUser = get_user_model()\n\n\nclass PaymentMethod(models.Model):\n    """Model to store user payment methods"""\n    CARD_TYPES = [\n        (\'visa\', \'Visa\'),\n        (\'mastercard\', \'Mastercard\'),\n        (\'amex\', \'American Express\'),\n        (\'discover\', \'Discover\'),\n    ]\n    \n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name=\'payment_methods\')\n    stripe_payment_method_id = models.CharField(max_length=255, unique=True)\n    card_type = models.CharField(max_length=20, choices=CARD_TYPES)\n    last_four_digits = models.CharField(max_length=4)\n    expiry_month = models.PositiveIntegerField()\n    expiry_year = models.PositiveIntegerField()\n    is_default = models.BooleanField(default=False)\n    is_active = models.BooleanField(default=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n\n    class Meta:\n        db_table = \'payment_methods\'\n        ordering = [\'-is_default\', \'-created_at\']\n\n    def __str__(self):\n        return f"{self.card_type.title()} ending in {self.last_four_digits}"\n\n    def save(self, *args, **kwargs):\n        if self.is_default:\n            # Ensure only one default payment method per user\n            PaymentMethod.objects.filter(\n                user=self.user, \n                is_default=True\n            ).exclude(pk=self.pk).update(is_default=False)\n        super().save(*args, **kwargs)\n\n\nclass Transaction(models.Model):\n    """Model to store payment transactions"""\n    STATUS_CHOICES = [\n        (\'pending\', \'Pending\'),\n        (\'processing\', \'Processing\'),\n        (\'succeeded\', \'Succeeded\'),\n        (\'failed\', \'Failed\'),\n        (\'cancelled\', \'Cancelled\'),\n        (\'refunded\', \'Refunded\'),\n        (\'partially_refunded\', \'Partially Refunded\'),\n    ]\n    \n    TRANSACTION_TYPES = [\n        (\'payment\', \'Payment\'),\n        (\'refund\', \'Refund\'),\n        (\'partial_refund\', \'Partial Refund\'),\n    ]\n\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name=\'transactions\')\n    order = models.ForeignKey(\'orders.Order\', on_delete=models.CASCADE, related_name=\'transactions\')\n    payment_method = models.ForeignKey(PaymentMethod, on_delete=models.SET_NULL, null=True, blank=True)\n    \n    # Stripe related fields\n    stripe_payment_intent_id = models.CharField(max_length=255, unique=True, null=True, blank=True)\n    stripe_charge_id = models.CharField(max_length=255, null=True, blank=True)\n    \n    # Transaction details\n    transaction_type = models.CharField(max_length=20, choices=TRANSACTION_TYPES, default=\'payment\')\n    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default=\'pending\')\n    amount = models.DecimalField(max_digits=10, decimal_places=2, validators=[MinValueValidator(Decimal(\'0.01\'))])\n    currency = models.CharField(max_length=3, default=\'USD\')\n    \n    # Metadata\n    description = models.TextField(blank=True)\n    failure_reason = models.TextField(blank=True)\n    stripe_fee = models.DecimalField(max_digits=10, decimal_places=2,' additional_kwargs={} response_metadata={'id': 'msg_01BaHZ1B883pgzywTTXJXHRZ', 'model': 'claude-sonnet-4-20250514', 'stop_reason': 'max_tokens', 'stop_sequence': None, 'usage': {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 400, 'output_tokens': 1024, 'service_tier': 'standard'}} id='run--48e3896d-2a69-4a9a-a248-dea5250e29b1-0' usage_metadata={'input_tokens': 400, 'output_tokens': 1024, 'total_tokens': 1424, 'input_token_details': {'cache_read': 0, 'cache_creation': 0}}
content='from rest_framework import serializers\nfrom django.contrib.auth import get_user_model\nfrom django.db import transaction\nfrom decimal import Decimal\nfrom .models import Order, OrderItem\nfrom ..products.models import Product\nfrom ..products.serializers import ProductSerializer\nfrom ..users.serializers import UserSerializer\n\nUser = get_user_model()\n\n\nclass OrderItemSerializer(serializers.ModelSerializer):\n    """Serializer for order items with product details."""\n    \n    product = ProductSerializer(read_only=True)\n    product_id = serializers.IntegerField(write_only=True)\n    subtotal = serializers.DecimalField(max_digits=10, decimal_places=2, read_only=True)\n    \n    class Meta:\n        model = OrderItem\n        fields = [\n            \'id\', \'product\', \'product_id\', \'quantity\', \n            \'price\', \'subtotal\', \'created_at\'\n        ]\n        read_only_fields = [\'id\', \'price\', \'created_at\']\n    \n    def validate_product_id(self, value):\n        """Validate that the product exists and is available."""\n        try:\n            product = Product.objects.get(id=value)\n            if not product.is_active:\n                raise serializers.ValidationError("Product is not available.")\n            return value\n        except Product.DoesNotExist:\n            raise serializers.ValidationError("Product does not exist.")\n    \n    def validate_quantity(self, value):\n        """Validate quantity is positive and within stock limits."""\n        if value <= 0:\n            raise serializers.ValidationError("Quantity must be greater than 0.")\n        return value\n    \n    def validate(self, attrs):\n        """Validate stock availability for the requested quantity."""\n        product_id = attrs.get(\'product_id\')\n        quantity = attrs.get(\'quantity\')\n        \n        if product_id and quantity:\n            try:\n                product = Product.objects.get(id=product_id)\n                if product.stock_quantity < quantity:\n                    raise serializers.ValidationError({\n                        \'quantity\': f"Only {product.stock_quantity} items available in stock."\n                    })\n            except Product.DoesNotExist:\n                pass  # Will be caught by product_id validation\n        \n        return attrs\n\n\nclass OrderSerializer(serializers.ModelSerializer):\n    """Serializer for orders with complete order details."""\n    \n    items = OrderItemSerializer(many=True, read_only=True)\n    order_items = OrderItemSerializer(many=True, write_only=True)\n    user = UserSerializer(read_only=True)\n    total_amount = serializers.DecimalField(max_digits=10, decimal_places=2, read_only=True)\n    item_count = serializers.IntegerField(read_only=True)\n    \n    class Meta:\n        model = Order\n        fields = [\n            \'id\', \'user\', \'status\', \'total_amount\', \'item_count\',\n            \'shipping_address\', \'billing_address\', \'payment_method\',\n            \'payment_status\', \'stripe_payment_intent_id\', \'tracking_number\',\n            \'notes\', \'items\', \'order_items\', \'created_at\', \'updated_at\'\n        ]\n        read_only_fields = [\n            \'id\', \'user\', \'total_amount\', \'item_count\', \n            \'stripe_payment_intent_id\', \'created_at\', \'updated_at\'\n        ]\n    \n    def validate_order_items(self, value):\n        """Validate that order has at least one item."""\n        if not value:\n            raise serializers.ValidationError("Order must contain at least one item.")\n        return value\n    \n    def validate_shipping_address(self, value):\n        """Validate shipping address format."""\n        if not value or not value.strip():\n            raise serializers.ValidationError("Shipping address is required.")\n        return value.strip()\n    \n    def validate_billing_address(self, value):\n        """Validate billing address format."""\n        if not value or not value.strip():\n            raise serializers.ValidationError("Billing address is required.")\n        return value.strip()\n    ' additional_kwargs={} response_metadata={'id': 'msg_01FWmCJQcpq9XwXvfzYcCqyN', 'model': 'claude-sonnet-4-20250514', 'stop_reason': 'max_tokens', 'stop_sequence': None, 'usage': {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 402, 'output_tokens': 1024, 'service_tier': 'standard'}} id='run--705277da-a5b1-472a-a87f-e32979a0bc82-0' usage_metadata={'input_tokens': 402, 'output_tokens': 1024, 'total_tokens': 1426, 'input_token_details': {'cache_read': 0, 'cache_creation': 0}}
content='from rest_framework import generics, status, permissions\nfrom rest_framework.decorators import api_view, permission_classes\nfrom rest_framework.response import Response\nfrom django.shortcuts import get_object_or_404\nfrom django.db import transaction\nfrom django.contrib.auth import get_user_model\nfrom django.utils import timezone\nfrom django.db.models import Q, Sum, F\nfrom django_filters.rest_framework import DjangoFilterBackend\nfrom rest_framework.filters import OrderingFilter, SearchFilter\nimport logging\nimport stripe\nfrom decimal import Decimal\n\nfrom .models import Order, OrderItem\nfrom .serializers import (\n    OrderSerializer,\n    OrderItemSerializer,\n    OrderCreateSerializer,\n    OrderUpdateSerializer,\n    OrderDetailSerializer\n)\nfrom apps.products.models import Product\nfrom apps.cart.models import Cart, CartItem\nfrom apps.notifications.utils import send_order_notification\nfrom core.permissions import IsOwnerOrReadOnly\nfrom core.pagination import StandardResultsSetPagination\nfrom core.utils import handle_stripe_error\n\nUser = get_user_model()\nlogger = logging.getLogger(__name__)\n\n\nclass OrderListCreateView(generics.ListCreateAPIView):\n    """\n    List orders for authenticated user or create a new order\n    """\n    serializer_class = OrderSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    pagination_class = StandardResultsSetPagination\n    filter_backends = [DjangoFilterBackend, OrderingFilter, SearchFilter]\n    filterset_fields = [\'status\', \'payment_status\']\n    ordering_fields = [\'created_at\', \'total_amount\', \'status\']\n    ordering = [\'-created_at\']\n    search_fields = [\'order_number\', \'shipping_address\']\n\n    def get_queryset(self):\n        """\n        Return orders for the current user only\n        """\n        return Order.objects.filter(\n            user=self.request.user\n        ).select_related(\'user\').prefetch_related(\'items__product\')\n\n    def get_serializer_class(self):\n        """\n        Return appropriate serializer based on action\n        """\n        if self.request.method == \'POST\':\n            return OrderCreateSerializer\n        return OrderSerializer\n\n    @transaction.atomic\n    def perform_create(self, serializer):\n        """\n        Create order from user\'s cart items\n        """\n        try:\n            user = self.request.user\n            \n            # Get user\'s cart\n            cart = get_object_or_404(Cart, user=user)\n            cart_items = CartItem.objects.filter(cart=cart).select_related(\'product\')\n            \n            if not cart_items.exists():\n                raise ValueError("Cart is empty")\n            \n            # Calculate total amount\n            total_amount = Decimal(\'0.00\')\n            order_items_data = []\n            \n            for cart_item in cart_items:\n                if cart_item.product.stock < cart_item.quantity:\n                    raise ValueError(f"Insufficient stock for {cart_item.product.name}")\n                \n                item_total = cart_item.product.price * cart_item.quantity\n                total_amount += item_total\n                \n                order_items_data.append({\n                    \'product\': cart_item.product,\n                    \'quantity\': cart_item.quantity,\n                    \'price\': cart_item.product.price,\n                    \'total\': item_total\n                })\n            \n            # Create order\n            order = serializer.save(\n                user=user,\n                total_amount=total_amount,\n                status=\'pending\',\n                payment_status=\'pending\'\n            )\n            \n            # Create order items and update product stock\n            for item_data in order_items_data:\n                OrderItem.objects.create(\n                    order=order,\n                    product=item_data[\'product\'],\n                    quantity=item_data[\'quantity\'],\n                    price=item_data[\'price\'],\n                    total=item_data[\'total\']\n                )\n                \n                # Update product stock\n                item_data[\'product\'].stock = F(\'stock\') - item_data[\'quantity\']\n                item_data[\'product\'].save(update_fields=[\'stock\'])\n            \n            # Clear cart\n            cart_items.delete()\n            \n            # Sen' additional_kwargs={} response_metadata={'id': 'msg_016cg6HbshWva959t1cZ5WGQ', 'model': 'claude-sonnet-4-20250514', 'stop_reason': 'max_tokens', 'stop_sequence': None, 'usage': {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 401, 'output_tokens': 1024, 'service_tier': 'standard'}} id='run--e3215247-de8f-4e9b-b720-f6dc38cb0ae4-0' usage_metadata={'input_tokens': 401, 'output_tokens': 1024, 'total_tokens': 1425, 'input_token_details': {'cache_read': 0, 'cache_creation': 0}}
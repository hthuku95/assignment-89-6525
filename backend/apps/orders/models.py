content='from django.db import models\nfrom django.contrib.auth.models import User\nfrom django.core.validators import MinValueValidator, MaxValueValidator\nfrom django.core.exceptions import ValidationError\nfrom decimal import Decimal\nimport uuid\nfrom django.utils import timezone\nfrom apps.products.models import Product\n\n\nclass Cart(models.Model):\n    """Shopping cart model for storing user\'s items before checkout"""\n    \n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name=\'cart\')\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    \n    class Meta:\n        db_table = \'carts\'\n        verbose_name = \'Cart\'\n        verbose_name_plural = \'Carts\'\n    \n    def __str__(self):\n        return f"Cart for {self.user.username}"\n    \n    @property\n    def total_items(self):\n        """Calculate total number of items in cart"""\n        return sum(item.quantity for item in self.items.all())\n    \n    @property\n    def total_price(self):\n        """Calculate total price of all items in cart"""\n        return sum(item.subtotal for item in self.items.all())\n    \n    def clear(self):\n        """Remove all items from cart"""\n        self.items.all().delete()\n    \n    def add_item(self, product, quantity=1):\n        """Add item to cart or update quantity if exists"""\n        cart_item, created = CartItem.objects.get_or_create(\n            cart=self,\n            product=product,\n            defaults={\'quantity\': quantity}\n        )\n        \n        if not created:\n            cart_item.quantity += quantity\n            cart_item.save()\n        \n        return cart_item\n\n\nclass CartItem(models.Model):\n    """Individual items in a shopping cart"""\n    \n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    cart = models.ForeignKey(Cart, on_delete=models.CASCADE, related_name=\'items\')\n    product = models.ForeignKey(Product, on_delete=models.CASCADE)\n    quantity = models.PositiveIntegerField(\n        default=1,\n        validators=[MinValueValidator(1), MaxValueValidator(100)]\n    )\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    \n    class Meta:\n        db_table = \'cart_items\'\n        verbose_name = \'Cart Item\'\n        verbose_name_plural = \'Cart Items\'\n        unique_together = (\'cart\', \'product\')\n        indexes = [\n            models.Index(fields=[\'cart\', \'product\']),\n        ]\n    \n    def __str__(self):\n        return f"{self.quantity}x {self.product.name} in {self.cart.user.username}\'s cart"\n    \n    @property\n    def subtotal(self):\n        """Calculate subtotal for this cart item"""\n        return self.product.price * self.quantity\n    \n    def clean(self):\n        """Validate cart item data"""\n        if self.product and not self.product.is_active:\n            raise ValidationError("Cannot add inactive product to cart")\n        \n        if self.product and self.quantity > self.product.stock:\n            raise ValidationError(f"Not enough stock. Available: {self.product.stock}")\n    \n    def save(self, *args, **kwargs):\n        """Override save to run validation"""\n        self.clean()\n        super().save(*args, **kwargs)\n\n\nclass Order(models.Model):\n    """Order model for completed purchases"""\n    \n    STATUS_CHOICES = [\n        (\'pending\', \'Pending\'),\n        (\'processing\', \'Processing\'),\n        (\'shipped\', \'Shipped\'),\n        (\'delivered\', \'Delivered\'),\n        (\'cancelled\', \'Cancelled\'),\n        (\'refunded\', \'Refunded\'),\n    ]\n    \n    ' additional_kwargs={} response_metadata={'id': 'msg_01U5JX9kFnHNDRX95Q9EtH8N', 'model': 'claude-sonnet-4-20250514', 'stop_reason': 'max_tokens', 'stop_sequence': None, 'usage': {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 401, 'output_tokens': 1024, 'service_tier': 'standard'}} id='run--21cba23a-a57d-4cec-9b76-a94be5f97659-0' usage_metadata={'input_tokens': 401, 'output_tokens': 1024, 'total_tokens': 1425, 'input_token_details': {'cache_read': 0, 'cache_creation': 0}}
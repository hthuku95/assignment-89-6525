content='from django.contrib.auth.models import AbstractUser\nfrom django.db import models\nfrom django.core.validators import RegexValidator\nfrom django.utils.translation import gettext_lazy as _\nfrom django.core.exceptions import ValidationError\nimport uuid\nfrom datetime import datetime, timedelta\n\n\nclass User(AbstractUser):\n    """\n    Custom User model extending Django\'s AbstractUser.\n    Provides additional fields for e-commerce functionality.\n    """\n    USER_TYPES = (\n        (\'customer\', \'Customer\'),\n        (\'admin\', \'Admin\'),\n        (\'staff\', \'Staff\'),\n    )\n    \n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    email = models.EmailField(_(\'email address\'), unique=True)\n    phone_number = models.CharField(\n        max_length=20,\n        validators=[\n            RegexValidator(\n                regex=r\'^\\+?1?\\d{9,15}$\',\n                message="Phone number must be entered in the format: \'+999999999\'. Up to 15 digits allowed."\n            )\n        ],\n        blank=True,\n        null=True\n    )\n    user_type = models.CharField(max_length=20, choices=USER_TYPES, default=\'customer\')\n    is_verified = models.BooleanField(default=False)\n    date_of_birth = models.DateField(blank=True, null=True)\n    profile_picture = models.ImageField(upload_to=\'profile_pictures/\', blank=True, null=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    last_login_ip = models.GenericIPAddressField(blank=True, null=True)\n    is_newsletter_subscribed = models.BooleanField(default=False)\n    \n    USERNAME_FIELD = \'email\'\n    REQUIRED_FIELDS = [\'username\', \'first_name\', \'last_name\']\n    \n    class Meta:\n        db_table = \'auth_user\'\n        verbose_name = _(\'User\')\n        verbose_name_plural = _(\'Users\')\n        indexes = [\n            models.Index(fields=[\'email\']),\n            models.Index(fields=[\'user_type\']),\n            models.Index(fields=[\'is_verified\']),\n        ]\n    \n    def __str__(self):\n        return f"{self.email} ({self.get_full_name()})"\n    \n    def get_full_name(self):\n        """Return the user\'s full name."""\n        full_name = f"{self.first_name} {self.last_name}".strip()\n        return full_name or self.username\n    \n    def clean(self):\n        """Validate user data."""\n        super().clean()\n        if self.date_of_birth and self.date_of_birth > datetime.now().date():\n            raise ValidationError({\'date_of_birth\': \'Date of birth cannot be in the future.\'})\n    \n    @property\n    def is_customer(self):\n        return self.user_type == \'customer\'\n    \n    @property\n    def is_admin_user(self):\n        return self.user_type == \'admin\' or self.is_superuser\n    \n    @property\n    def is_staff_user(self):\n        return self.user_type == \'staff\' or self.is_staff\n\n\nclass UserProfile(models.Model):\n    """\n    Extended user profile information for e-commerce features.\n    """\n    GENDER_CHOICES = (\n        (\'M\', \'Male\'),\n        (\'F\', \'Female\'),\n        (\'O\', \'Other\'),\n        (\'N\', \'Prefer not to say\'),\n    )\n    \n    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name=\'profile\')\n    bio = models.TextField(max_length=500, blank=True)\n    gender = models.CharField(max_length=1, choices=GENDER_CHOICES, blank=True)\n    website = models.URLField(blank=True)\n    company = models.CharField(max_length=100, blank=True)\n    job_title =' additional_kwargs={} response_metadata={'id': 'msg_01Aod5xTEFB3bUSL7H3J3J8c', 'model': 'claude-sonnet-4-20250514', 'stop_reason': 'max_tokens', 'stop_sequence': None, 'usage': {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 400, 'output_tokens': 1024, 'service_tier': 'standard'}} id='run--3ca4d413-44b1-4b7b-bcf3-55ee98bd6729-0' usage_metadata={'input_tokens': 400, 'output_tokens': 1024, 'total_tokens': 1424, 'input_token_details': {'cache_read': 0, 'cache_creation': 0}}
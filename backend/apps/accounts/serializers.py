content='from rest_framework import serializers\nfrom django.contrib.auth import authenticate\nfrom django.contrib.auth.models import User\nfrom django.contrib.auth.password_validation import validate_password\nfrom django.core.exceptions import ValidationError\nfrom rest_framework.validators import UniqueValidator\nimport re\n\n\nclass UserRegistrationSerializer(serializers.ModelSerializer):\n    """\n    Serializer for user registration with comprehensive validation\n    """\n    email = serializers.EmailField(\n        required=True,\n        validators=[UniqueValidator(queryset=User.objects.all(), message="Email already exists")]\n    )\n    password = serializers.CharField(\n        write_only=True,\n        min_length=8,\n        style={\'input_type\': \'password\'}\n    )\n    password_confirm = serializers.CharField(\n        write_only=True,\n        style={\'input_type\': \'password\'}\n    )\n    first_name = serializers.CharField(required=True, max_length=30)\n    last_name = serializers.CharField(required=True, max_length=30)\n\n    class Meta:\n        model = User\n        fields = (\'username\', \'email\', \'password\', \'password_confirm\', \'first_name\', \'last_name\')\n        extra_kwargs = {\n            \'username\': {\n                \'validators\': [UniqueValidator(queryset=User.objects.all(), message="Username already exists")]\n            }\n        }\n\n    def validate_username(self, value):\n        """Validate username format"""\n        if not re.match(r\'^[a-zA-Z0-9_]+$\', value):\n            raise serializers.ValidationError(\n                "Username can only contain letters, numbers, and underscores"\n            )\n        if len(value) < 3:\n            raise serializers.ValidationError("Username must be at least 3 characters long")\n        return value\n\n    def validate_password(self, value):\n        """Validate password strength"""\n        try:\n            validate_password(value)\n        except ValidationError as e:\n            raise serializers.ValidationError(list(e.messages))\n        return value\n\n    def validate(self, attrs):\n        """Validate password confirmation"""\n        if attrs[\'password\'] != attrs[\'password_confirm\']:\n            raise serializers.ValidationError({"password_confirm": "Passwords do not match"})\n        return attrs\n\n    def create(self, validated_data):\n        """Create new user with validated data"""\n        validated_data.pop(\'password_confirm\')\n        user = User.objects.create_user(\n            username=validated_data[\'username\'],\n            email=validated_data[\'email\'],\n            password=validated_data[\'password\'],\n            first_name=validated_data[\'first_name\'],\n            last_name=validated_data[\'last_name\']\n        )\n        return user\n\n\nclass UserLoginSerializer(serializers.Serializer):\n    """\n    Serializer for user authentication\n    """\n    username = serializers.CharField(required=True)\n    password = serializers.CharField(\n        required=True,\n        write_only=True,\n        style={\'input_type\': \'password\'}\n    )\n\n    def validate(self, attrs):\n        """Authenticate user credentials"""\n        username = attrs.get(\'username\')\n        password = attrs.get(\'password\')\n\n        if username and password:\n            # Try to authenticate with username first\n            user = authenticate(username=username, password=password)\n            \n            # If username auth fails, try with email\n            if not user:\n                try:\n                    user_obj = User.objects.get(email=username)\n                    user = authenticate(username=user_obj.username, password=password)\n                except User.DoesNotExist:\n                    pass\n\n            if not user:\n                raise serializers.ValidationError("Invalid credentials")\n            \n            if not user.is_active:\n                raise serializers.ValidationError("User account is disabled")\n            \n            attrs[\'user\'] = user\n        else:\n            raise serializers.ValidationError("Must include username and password")\n        \n        return attrs\n\n\nclass UserProfileSerializer(serializers.ModelSerializer):\n    """\n    Serializer for user profile information\n    """\n    email = serializers.EmailField(\n        validators=[UniqueValidator(queryset=User.objects.all' additional_kwargs={} response_metadata={'id': 'msg_01W2nReNT8oyzJ83vEz4bFrs', 'model': 'claude-sonnet-4-20250514', 'stop_reason': 'max_tokens', 'stop_sequence': None, 'usage': {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 402, 'output_tokens': 1024, 'service_tier': 'standard'}} id='run--608bf7ef-4daa-46d1-8952-e5dd3a9c8371-0' usage_metadata={'input_tokens': 402, 'output_tokens': 1024, 'total_tokens': 1426, 'input_token_details': {'cache_read': 0, 'cache_creation': 0}}
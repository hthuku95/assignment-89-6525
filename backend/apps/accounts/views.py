content='from rest_framework import status, permissions\nfrom rest_framework.decorators import api_view, permission_classes\nfrom rest_framework.response import Response\nfrom rest_framework.views import APIView\nfrom rest_framework.authtoken.views import ObtainAuthToken\nfrom rest_framework.authtoken.models import Token\nfrom rest_framework.permissions import IsAuthenticated\nfrom django.contrib.auth import authenticate, login, logout\nfrom django.contrib.auth.models import User\nfrom django.core.exceptions import ValidationError\nfrom django.core.validators import validate_email\nfrom django.db import IntegrityError\nfrom django.utils.decorators import method_decorator\nfrom django.views.decorators.csrf import csrf_exempt\nfrom django.contrib.auth.password_validation import validate_password\nimport logging\nimport json\n\nfrom .serializers import UserRegistrationSerializer, UserProfileSerializer, ChangePasswordSerializer\nfrom .models import UserProfile\n\nlogger = logging.getLogger(__name__)\n\n\nclass UserRegistrationView(APIView):\n    """\n    API view for user registration\n    """\n    permission_classes = [permissions.AllowAny]\n\n    def post(self, request):\n        """\n        Register a new user\n        """\n        try:\n            serializer = UserRegistrationSerializer(data=request.data)\n            \n            if serializer.is_valid():\n                # Extract validated data\n                username = serializer.validated_data[\'username\']\n                email = serializer.validated_data[\'email\']\n                password = serializer.validated_data[\'password\']\n                first_name = serializer.validated_data.get(\'first_name\', \'\')\n                last_name = serializer.validated_data.get(\'last_name\', \'\')\n                \n                # Check if user already exists\n                if User.objects.filter(username=username).exists():\n                    return Response(\n                        {\'error\': \'Username already exists\'}, \n                        status=status.HTTP_400_BAD_REQUEST\n                    )\n                \n                if User.objects.filter(email=email).exists():\n                    return Response(\n                        {\'error\': \'Email already registered\'}, \n                        status=status.HTTP_400_BAD_REQUEST\n                    )\n                \n                # Validate password\n                try:\n                    validate_password(password)\n                except ValidationError as e:\n                    return Response(\n                        {\'error\': list(e.messages)}, \n                        status=status.HTTP_400_BAD_REQUEST\n                    )\n                \n                # Create user\n                user = User.objects.create_user(\n                    username=username,\n                    email=email,\n                    password=password,\n                    first_name=first_name,\n                    last_name=last_name\n                )\n                \n                # Create user profile\n                UserProfile.objects.create(user=user)\n                \n                # Create authentication token\n                token, created = Token.objects.get_or_create(user=user)\n                \n                logger.info(f"New user registered: {username}")\n                \n                return Response({\n                    \'message\': \'User registered successfully\',\n                    \'user_id\': user.id,\n                    \'username\': user.username,\n                    \'email\': user.email,\n                    \'token\': token.key\n                }, status=status.HTTP_201_CREATED)\n                \n            else:\n                return Response(\n                    {\'error\': serializer.errors}, \n                    status=status.HTTP_400_BAD_REQUEST\n                )\n                \n        except IntegrityError as e:\n            logger.error(f"Database integrity error during registration: {str(e)}")\n            return Response(\n                {\'error\': \'Registration failed due to database error\'}, \n                status=status.HTTP_500_INTERNAL_SERVER_ERROR\n            )\n        except Exception as e:\n            logger.error(f"Unexpected error during registration: {str(e)}")\n            return Response(\n                {\'error\': \'An unexpected error occurred\'}, \n                status=status.HTTP_500_INTERNAL_SERVER_ERROR\n            )\n\n\nclass CustomAuthToken(ObtainAuthToken):\n    """\n    Custom authentication token view with enhanced response\n    """\n    \n    def post(self, request, *args, **kwargs):\n        """\n        Authenticate user and return token with user details' additional_kwargs={} response_metadata={'id': 'msg_01QZ2Yk3QXoSF6FfwPPGgAh9', 'model': 'claude-sonnet-4-20250514', 'stop_reason': 'max_tokens', 'stop_sequence': None, 'usage': {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 400, 'output_tokens': 1024, 'service_tier': 'standard'}} id='run--427efc60-ca55-4823-a1cc-333627bc888d-0' usage_metadata={'input_tokens': 400, 'output_tokens': 1024, 'total_tokens': 1424, 'input_token_details': {'cache_read': 0, 'cache_creation': 0}}
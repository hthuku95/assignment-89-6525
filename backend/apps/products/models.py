content='from django.db import models\nfrom django.core.validators import MinValueValidator, MaxValueValidator\nfrom django.utils.text import slugify\nfrom django.urls import reverse\nfrom decimal import Decimal\nimport uuid\nfrom PIL import Image\nimport os\n\n\nclass Category(models.Model):\n    """Product category model for organizing products hierarchically."""\n    \n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    name = models.CharField(max_length=200, unique=True)\n    slug = models.SlugField(max_length=200, unique=True, blank=True)\n    description = models.TextField(blank=True, null=True)\n    parent = models.ForeignKey(\n        \'self\', \n        on_delete=models.CASCADE, \n        blank=True, \n        null=True, \n        related_name=\'children\'\n    )\n    image = models.ImageField(upload_to=\'categories/\', blank=True, null=True)\n    is_active = models.BooleanField(default=True)\n    sort_order = models.IntegerField(default=0)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n\n    class Meta:\n        verbose_name_plural = "Categories"\n        ordering = [\'sort_order\', \'name\']\n        indexes = [\n            models.Index(fields=[\'slug\']),\n            models.Index(fields=[\'is_active\']),\n            models.Index(fields=[\'parent\']),\n        ]\n\n    def __str__(self):\n        return self.name\n\n    def save(self, *args, **kwargs):\n        if not self.slug:\n            self.slug = slugify(self.name)\n        super().save(*args, **kwargs)\n\n    def get_absolute_url(self):\n        return reverse(\'category-detail\', kwargs={\'slug\': self.slug})\n\n    def get_all_children(self):\n        """Recursively get all child categories."""\n        children = []\n        for child in self.children.filter(is_active=True):\n            children.append(child)\n            children.extend(child.get_all_children())\n        return children\n\n    def get_products_count(self):\n        """Get total number of products in this category and subcategories."""\n        count = self.products.filter(is_active=True).count()\n        for child in self.children.filter(is_active=True):\n            count += child.get_products_count()\n        return count\n\n    def get_breadcrumbs(self):\n        """Get category breadcrumb trail."""\n        breadcrumbs = [self]\n        parent = self.parent\n        while parent:\n            breadcrumbs.insert(0, parent)\n            parent = parent.parent\n        return breadcrumbs\n\n\nclass Brand(models.Model):\n    """Brand model for product manufacturers."""\n    \n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    name = models.CharField(max_length=100, unique=True)\n    slug = models.SlugField(max_length=100, unique=True, blank=True)\n    description = models.TextField(blank=True, null=True)\n    logo = models.ImageField(upload_to=\'brands/\', blank=True, null=True)\n    website = models.URLField(blank=True, null=True)\n    is_active = models.BooleanField(default=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n\n    class Meta:\n        ordering = [\'name\']\n        indexes = [\n            models.Index(fields=[\'slug\']),\n            models.Index(fields=[\'is_active\']),\n        ]\n\n    def __str__(self):\n        return self.name\n\n    def save(self, *args, **kwargs):\n        if not self.slug:\n            self.slug = slugify(self.name)\n        super().save(*args, **kwargs)\n\n\nclass Product(models.Model):\n    """Main product model with comprehensive e-commerce features."""\n    \n    STATUS_CHOICES = [' additional_kwargs={} response_metadata={'id': 'msg_01LCApModLVa7iRpzwE11E3W', 'model': 'claude-sonnet-4-20250514', 'stop_reason': 'max_tokens', 'stop_sequence': None, 'usage': {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 401, 'output_tokens': 1024, 'service_tier': 'standard'}} id='run--fa7c1ca0-4f44-41e1-bcd8-dcf7d881d1cb-0' usage_metadata={'input_tokens': 401, 'output_tokens': 1024, 'total_tokens': 1425, 'input_token_details': {'cache_read': 0, 'cache_creation': 0}}
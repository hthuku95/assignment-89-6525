content='from rest_framework import serializers\nfrom django.contrib.auth import get_user_model\nfrom .models import Category, Product, ProductImage, Review, Wishlist\nimport logging\n\nlogger = logging.getLogger(__name__)\nUser = get_user_model()\n\n\nclass CategorySerializer(serializers.ModelSerializer):\n    """Serializer for Category model"""\n    product_count = serializers.SerializerMethodField()\n    \n    class Meta:\n        model = Category\n        fields = [\'id\', \'name\', \'slug\', \'description\', \'image\', \'is_active\', \'product_count\']\n        read_only_fields = [\'id\', \'product_count\']\n    \n    def get_product_count(self, obj):\n        """Get the number of active products in this category"""\n        return obj.products.filter(is_active=True).count()\n    \n    def validate_name(self, value):\n        """Validate category name is unique"""\n        if self.instance and self.instance.name == value:\n            return value\n        \n        if Category.objects.filter(name__iexact=value).exists():\n            raise serializers.ValidationError("A category with this name already exists.")\n        return value\n\n\nclass ProductImageSerializer(serializers.ModelSerializer):\n    """Serializer for ProductImage model"""\n    \n    class Meta:\n        model = ProductImage\n        fields = [\'id\', \'image\', \'alt_text\', \'is_primary\', \'order\']\n        read_only_fields = [\'id\']\n    \n    def validate_image(self, value):\n        """Validate image file size and format"""\n        if value.size > 5 * 1024 * 1024:  # 5MB limit\n            raise serializers.ValidationError("Image file too large. Maximum size is 5MB.")\n        \n        if not value.content_type.startswith(\'image/\'):\n            raise serializers.ValidationError("File must be an image.")\n        \n        return value\n\n\nclass ProductListSerializer(serializers.ModelSerializer):\n    """Lightweight serializer for product listings"""\n    category_name = serializers.CharField(source=\'category.name\', read_only=True)\n    primary_image = serializers.SerializerMethodField()\n    average_rating = serializers.SerializerMethodField()\n    review_count = serializers.SerializerMethodField()\n    is_in_stock = serializers.SerializerMethodField()\n    \n    class Meta:\n        model = Product\n        fields = [\n            \'id\', \'name\', \'slug\', \'price\', \'discount_price\', \'category_name\',\n            \'primary_image\', \'average_rating\', \'review_count\', \'is_in_stock\',\n            \'is_featured\', \'created_at\'\n        ]\n    \n    def get_primary_image(self, obj):\n        """Get the primary product image"""\n        primary_image = obj.images.filter(is_primary=True).first()\n        if primary_image:\n            request = self.context.get(\'request\')\n            if request:\n                return request.build_absolute_uri(primary_image.image.url)\n            return primary_image.image.url\n        return None\n    \n    def get_average_rating(self, obj):\n        """Get the average rating for the product"""\n        return obj.get_average_rating()\n    \n    def get_review_count(self, obj):\n        """Get the number of reviews for the product"""\n        return obj.reviews.filter(is_approved=True).count()\n    \n    def get_is_in_stock(self, obj):\n        """Check if product is in stock"""\n        return obj.stock_quantity > 0\n\n\nclass ProductDetailSerializer(serializers.ModelSerializer):\n    """Detailed serializer for single product view"""\n    category = CategorySerializer(read_only=True)\n    category_id = serializers.IntegerField(write_only=True)\n    images = ProductImageSerializer(many=True, read_only=True)\n    average_rating = serializers.SerializerMethodField()\n    review_count = serializers.SerializerMethodField()\n    is_in_stock = serializers.SerializerMethodField()\n    is_wishlisted = serializers.Serializer' additional_kwargs={} response_metadata={'id': 'msg_018bxMAp1BJYh436EmK1skkL', 'model': 'claude-sonnet-4-20250514', 'stop_reason': 'max_tokens', 'stop_sequence': None, 'usage': {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 402, 'output_tokens': 1024, 'service_tier': 'standard'}} id='run--a693669b-412d-46e0-8508-c12db5e62bd6-0' usage_metadata={'input_tokens': 402, 'output_tokens': 1024, 'total_tokens': 1426, 'input_token_details': {'cache_read': 0, 'cache_creation': 0}}
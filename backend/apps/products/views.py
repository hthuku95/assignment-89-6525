content='from rest_framework import generics, status, filters\nfrom rest_framework.decorators import api_view, permission_classes\nfrom rest_framework.permissions import IsAuthenticated, IsAuthenticatedOrReadOnly\nfrom rest_framework.response import Response\nfrom rest_framework.views import APIView\nfrom django_filters.rest_framework import DjangoFilterBackend\nfrom django.db.models import Q, Avg\nfrom django.shortcuts import get_object_or_404\nimport logging\n\nfrom .models import Product, Category, Review, ProductImage\nfrom .serializers import (\n    ProductSerializer, \n    ProductDetailSerializer, \n    CategorySerializer,\n    ReviewSerializer,\n    ProductImageSerializer\n)\nfrom .filters import ProductFilter\nfrom .permissions import IsOwnerOrReadOnly\n\nlogger = logging.getLogger(__name__)\n\n\nclass CategoryListView(generics.ListCreateAPIView):\n    """\n    List all categories or create a new category.\n    GET: Public access\n    POST: Authenticated users only\n    """\n    queryset = Category.objects.filter(is_active=True)\n    serializer_class = CategorySerializer\n    permission_classes = [IsAuthenticatedOrReadOnly]\n    \n    def get_queryset(self):\n        queryset = Category.objects.filter(is_active=True)\n        parent = self.request.query_params.get(\'parent\', None)\n        \n        if parent is not None:\n            if parent == \'null\':\n                queryset = queryset.filter(parent__isnull=True)\n            else:\n                queryset = queryset.filter(parent=parent)\n                \n        return queryset.order_by(\'name\')\n\n\nclass CategoryDetailView(generics.RetrieveUpdateDestroyAPIView):\n    """\n    Retrieve, update or delete a category.\n    GET: Public access\n    PUT/PATCH/DELETE: Authenticated users only\n    """\n    queryset = Category.objects.filter(is_active=True)\n    serializer_class = CategorySerializer\n    permission_classes = [IsAuthenticatedOrReadOnly]\n\n\nclass ProductListView(generics.ListCreateAPIView):\n    """\n    List all products or create a new product.\n    Supports filtering, searching, and ordering.\n    """\n    queryset = Product.objects.filter(is_active=True).select_related(\'category\')\n    serializer_class = ProductSerializer\n    permission_classes = [IsAuthenticatedOrReadOnly]\n    filter_backends = [DjangoFilterBackend, filters.SearchFilter, filters.OrderingFilter]\n    filterset_class = ProductFilter\n    search_fields = [\'name\', \'description\', \'category__name\']\n    ordering_fields = [\'price\', \'created_at\', \'updated_at\', \'average_rating\']\n    ordering = [\'-created_at\']\n    \n    def get_queryset(self):\n        queryset = Product.objects.filter(is_active=True).select_related(\'category\')\n        \n        # Filter by category\n        category_id = self.request.query_params.get(\'category\', None)\n        if category_id:\n            try:\n                category = Category.objects.get(id=category_id)\n                # Include products from subcategories\n                categories = [category] + list(category.get_descendants())\n                queryset = queryset.filter(category__in=categories)\n            except Category.DoesNotExist:\n                logger.warning(f"Category with id {category_id} not found")\n        \n        # Filter by price range\n        min_price = self.request.query_params.get(\'min_price\', None)\n        max_price = self.request.query_params.get(\'max_price\', None)\n        \n        if min_price:\n            try:\n                queryset = queryset.filter(price__gte=float(min_price))\n            except ValueError:\n                logger.warning(f"Invalid min_price value: {min_price}")\n                \n        if max_price:\n            try:\n                queryset = queryset.filter(price__lte=float(max_price))\n            except ValueError:\n                logger.warning(f"Invalid max_price value: {max_price}")\n        \n        # Filter by availability\n        in_stock = self.request.query_params.get(\'in_stock\', None' additional_kwargs={} response_metadata={'id': 'msg_01Nwj5foCcgV8UCYeGHG1JtE', 'model': 'claude-sonnet-4-20250514', 'stop_reason': 'max_tokens', 'stop_sequence': None, 'usage': {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 400, 'output_tokens': 1024, 'service_tier': 'standard'}} id='run--88708df2-81a1-47d7-bb68-5faec8d4750c-0' usage_metadata={'input_tokens': 400, 'output_tokens': 1024, 'total_tokens': 1424, 'input_token_details': {'cache_read': 0, 'cache_creation': 0}}
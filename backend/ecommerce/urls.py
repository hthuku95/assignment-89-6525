content='"""\nE-commerce Platform - Main URL Configuration\n\nThis module contains the main URL routing configuration for the Django e-commerce platform.\nIt includes routing for the admin interface, API endpoints, authentication, and media files.\n"""\n\nfrom django.contrib import admin\nfrom django.urls import path, include\nfrom django.conf import settings\nfrom django.conf.urls.static import static\nfrom django.views.generic import RedirectView\nfrom django.http import JsonResponse\nfrom django.views.decorators.csrf import csrf_exempt\nimport logging\n\nlogger = logging.getLogger(__name__)\n\n\ndef health_check(request):\n    """\n    Simple health check endpoint for monitoring and load balancers.\n    Returns basic system status information.\n    """\n    try:\n        return JsonResponse({\n            \'status\': \'healthy\',\n            \'service\': \'ecommerce-platform\',\n            \'version\': \'1.0.0\',\n            \'debug\': settings.DEBUG\n        })\n    except Exception as e:\n        logger.error(f"Health check failed: {str(e)}")\n        return JsonResponse({\n            \'status\': \'unhealthy\',\n            \'error\': str(e)\n        }, status=500)\n\n\ndef api_root(request):\n    """\n    API root endpoint providing information about available API versions.\n    """\n    return JsonResponse({\n        \'message\': \'Welcome to E-commerce Platform API\',\n        \'version\': \'v1\',\n        \'endpoints\': {\n            \'auth\': \'/api/v1/auth/\',\n            \'products\': \'/api/v1/products/\',\n            \'orders\': \'/api/v1/orders/\',\n            \'cart\': \'/api/v1/cart/\',\n            \'payments\': \'/api/v1/payments/\',\n            \'notifications\': \'/api/v1/notifications/\',\n            \'users\': \'/api/v1/users/\',\n            \'admin\': \'/admin/\',\n            \'health\': \'/health/\',\n            \'docs\': \'/api/docs/\'\n        },\n        \'documentation\': \'/api/docs/\',\n        \'admin_panel\': \'/admin/\'\n    })\n\n\nurlpatterns = [\n    # Admin interface\n    path(\'admin/\', admin.site.urls),\n    \n    # Health check endpoint\n    path(\'health/\', health_check, name=\'health_check\'),\n    \n    # API root\n    path(\'api/\', api_root, name=\'api_root\'),\n    \n    # API v1 endpoints\n    path(\'api/v1/\', include([\n        # Authentication endpoints\n        path(\'auth/\', include(\'apps.authentication.urls\')),\n        \n        # Product management endpoints\n        path(\'products/\', include(\'apps.products.urls\')),\n        \n        # Order management endpoints\n        path(\'orders/\', include(\'apps.orders.urls\')),\n        \n        # Shopping cart endpoints\n        path(\'cart/\', include(\'apps.cart.urls\')),\n        \n        # Payment processing endpoints\n        path(\'payments/\', include(\'apps.payments.urls\')),\n        \n        # User management endpoints\n        path(\'users/\', include(\'apps.users.urls\')),\n        \n        # Notification endpoints\n        path(\'notifications/\', include(\'apps.notifications.urls\')),\n        \n        # Analytics endpoints (if implemented)\n        path(\'analytics/\', include(\'apps.analytics.urls\')),\n    ])),\n    \n    # WebSocket endpoints for real-time features\n    # Note: WebSocket routing is typically handled in routing.py for Django Channels\n    \n    # API documentation (if using DRF spectacular or similar)\n    path(\'api/docs/\', include([\n        path(\'\', include(\'drf_spectacular.urls\')),\n    ])) if \'drf_spectacular\' in settings.INSTALLED_APPS else path(\'api/docs/\', \n        lambda request: JsonResponse({\'message\': \'API documentation not configured\'})),\n    \n    # Redirect root to API root\n    path(\'\', RedirectView.as_view(url=\'/api/\', permanent=False), name=\'root_redirect\'),\n]\n\n# Serve media files during development\nif settings.DEBUG:\n    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)\n    urlpatterns += static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)\n    \n    # Add debug toolbar if installed\n    if \'debug_toolbar\' in settings.INSTALLED_APPS:\n        import debug_toolbar\n        url' additional_kwargs={} response_metadata={'id': 'msg_01VQSgSpWfsLHF4JhXguawaF', 'model': 'claude-sonnet-4-20250514', 'stop_reason': 'max_tokens', 'stop_sequence': None, 'usage': {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 401, 'output_tokens': 1024, 'service_tier': 'standard'}} id='run--082b8941-5c53-4783-ad13-b5aa2d165466-0' usage_metadata={'input_tokens': 401, 'output_tokens': 1024, 'total_tokens': 1425, 'input_token_details': {'cache_read': 0, 'cache_creation': 0}}
content='"""\nWSGI config for ecommerce project.\n\nIt exposes the WSGI callable as a module-level variable named ``application``.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/4.2/howto/deployment/wsgi/\n"""\n\nimport os\nimport sys\nfrom pathlib import Path\n\nfrom django.core.wsgi import get_wsgi_application\n\n# Build paths inside the project\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n# Add the project directory to the Python path\nsys.path.insert(0, str(BASE_DIR))\n\n# Set the default Django settings module for the \'wsgi\' application\nos.environ.setdefault(\'DJANGO_SETTINGS_MODULE\', \'ecommerce.settings\')\n\ntry:\n    # Get the Django WSGI application\n    application = get_wsgi_application()\nexcept Exception as e:\n    # Log the error for debugging purposes\n    import logging\n    \n    # Configure basic logging if not already configured\n    logging.basicConfig(\n        level=logging.ERROR,\n        format=\'%(asctime)s - %(name)s - %(levelname)s - %(message)s\'\n    )\n    \n    logger = logging.getLogger(__name__)\n    logger.error(f"Failed to initialize WSGI application: {e}")\n    \n    # Re-raise the exception to prevent silent failures\n    raise\n\n# Additional configuration for production deployment\ndef configure_static_files():\n    """Configure static files serving for production"""\n    try:\n        from django.conf import settings\n        from whitenoise import WhiteNoise\n        \n        # Only apply WhiteNoise in production\n        if not settings.DEBUG:\n            global application\n            application = WhiteNoise(application, root=settings.STATIC_ROOT)\n            \n            # Add compression and caching for static files\n            application.add_files(settings.STATIC_ROOT, prefix=settings.STATIC_URL)\n            \n            if hasattr(settings, \'MEDIA_ROOT\') and settings.MEDIA_ROOT:\n                application.add_files(settings.MEDIA_ROOT, prefix=settings.MEDIA_URL)\n                \n    except ImportError:\n        # WhiteNoise not installed, skip static file configuration\n        pass\n    except Exception as e:\n        logger = logging.getLogger(__name__)\n        logger.warning(f"Could not configure static files: {e}")\n\n# Configure static files if in production\nif os.environ.get(\'DJANGO_SETTINGS_MODULE\') == \'ecommerce.settings.production\':\n    configure_static_files()' additional_kwargs={} response_metadata={'id': 'msg_01AKGRZ8MbBRXgBBVRsSyd91', 'model': 'claude-sonnet-4-20250514', 'stop_reason': 'end_turn', 'stop_sequence': None, 'usage': {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 404, 'output_tokens': 616, 'service_tier': 'standard'}} id='run--6607053c-fd85-4aba-ad08-325afd764078-0' usage_metadata={'input_tokens': 404, 'output_tokens': 616, 'total_tokens': 1020, 'input_token_details': {'cache_read': 0, 'cache_creation': 0}}
content='#!/usr/bin/env python\n"""Django\'s command-line utility for administrative tasks."""\nimport os\nimport sys\nimport logging\nfrom pathlib import Path\n\n\ndef configure_logging():\n    """Configure logging for the Django management commands."""\n    logging.basicConfig(\n        level=logging.INFO,\n        format=\'%(asctime)s - %(name)s - %(levelname)s - %(message)s\',\n        handlers=[\n            logging.StreamHandler(sys.stdout)\n        ]\n    )\n\n\ndef check_python_version():\n    """Ensure Python version compatibility."""\n    if sys.version_info < (3, 8):\n        raise RuntimeError(\n            "This Django project requires Python 3.8 or higher. "\n            f"You are using Python {sys.version_info.major}.{sys.version_info.minor}"\n        )\n\n\ndef validate_environment():\n    """Validate required environment variables and settings."""\n    required_env_vars = [\n        \'DJANGO_SECRET_KEY\',\n        \'DATABASE_URL\',\n    ]\n    \n    missing_vars = []\n    for var in required_env_vars:\n        if not os.environ.get(var):\n            missing_vars.append(var)\n    \n    if missing_vars:\n        logging.warning(\n            f"Missing environment variables: {\', \'.join(missing_vars)}. "\n            "Some functionality may not work correctly."\n        )\n\n\ndef setup_django_settings():\n    """Set up Django settings module."""\n    settings_module = os.environ.get(\'DJANGO_SETTINGS_MODULE\')\n    \n    if not settings_module:\n        # Default to development settings if not specified\n        environment = os.environ.get(\'DJANGO_ENV\', \'development\')\n        \n        settings_map = {\n            \'development\': \'ecommerce.settings.development\',\n            \'testing\': \'ecommerce.settings.testing\',\n            \'staging\': \'ecommerce.settings.staging\',\n            \'production\': \'ecommerce.settings.production\',\n        }\n        \n        settings_module = settings_map.get(environment, \'ecommerce.settings.development\')\n        os.environ.setdefault(\'DJANGO_SETTINGS_MODULE\', settings_module)\n        \n        logging.info(f"Using Django settings: {settings_module}")\n\n\ndef main():\n    """Run administrative tasks."""\n    try:\n        # Configure logging first\n        configure_logging()\n        \n        # Validate Python version\n        check_python_version()\n        \n        # Setup Django settings\n        setup_django_settings()\n        \n        # Validate environment\n        validate_environment()\n        \n        # Import Django management utility\n        from django.core.management import execute_from_command_line\n        \n    except ImportError as exc:\n        error_msg = (\n            "Couldn\'t import Django. Are you sure it\'s installed and "\n            "available on your PYTHONPATH environment variable? Did you "\n            "forget to activate a virtual environment?"\n        )\n        logging.error(f"{error_msg}\\nOriginal error: {exc}")\n        raise ImportError(error_msg) from exc\n    \n    except Exception as exc:\n        logging.error(f"Error during Django setup: {exc}")\n        sys.exit(1)\n    \n    try:\n        # Execute Django management command\n        execute_from_command_line(sys.argv)\n        \n    except KeyboardInterrupt:\n        logging.info("Operation cancelled by user")\n        sys.exit(0)\n        \n    except Exception as exc:\n        logging.error(f"Error executing Django command: {exc}")\n        sys.exit(1)\n\n\nif __name__ == \'__main__\':\n    main()' additional_kwargs={} response_metadata={'id': 'msg_014iuuDgTFGF92ZF9zCAfkvJ', 'model': 'claude-sonnet-4-20250514', 'stop_reason': 'end_turn', 'stop_sequence': None, 'usage': {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 396, 'output_tokens': 881, 'service_tier': 'standard'}} id='run--dec36e4e-87bc-4d9e-b214-bf440fa9db02-0' usage_metadata={'input_tokens': 396, 'output_tokens': 881, 'total_tokens': 1277, 'input_token_details': {'cache_read': 0, 'cache_creation': 0}}
content='import pytest\nimport json\nfrom decimal import Decimal\nfrom django.test import TestCase\nfrom django.urls import reverse\nfrom django.contrib.auth import get_user_model\nfrom rest_framework.test import APITestCase, APIClient\nfrom rest_framework import status\nfrom django.core.files.uploadedfile import SimpleUploadedFile\nfrom unittest.mock import patch, Mock\nfrom products.models import Product, Category, ProductImage, Review\nfrom products.serializers import ProductSerializer, CategorySerializer\n\nUser = get_user_model()\n\n\nclass ProductModelTest(TestCase):\n    """Test cases for Product model"""\n    \n    def setUp(self):\n        """Set up test data"""\n        self.category = Category.objects.create(\n            name="Electronics",\n            description="Electronic devices and gadgets",\n            slug="electronics"\n        )\n        \n        self.product_data = {\n            \'name\': \'Test Product\',\n            \'description\': \'A test product description\',\n            \'price\': Decimal(\'99.99\'),\n            \'stock_quantity\': 10,\n            \'category\': self.category,\n            \'sku\': \'TEST-001\',\n            \'is_active\': True\n        }\n    \n    def test_product_creation(self):\n        """Test product model creation"""\n        product = Product.objects.create(**self.product_data)\n        \n        self.assertEqual(product.name, \'Test Product\')\n        self.assertEqual(product.price, Decimal(\'99.99\'))\n        self.assertEqual(product.stock_quantity, 10)\n        self.assertEqual(product.category, self.category)\n        self.assertTrue(product.is_active)\n        self.assertIsNotNone(product.created_at)\n        self.assertIsNotNone(product.updated_at)\n    \n    def test_product_str_representation(self):\n        """Test product string representation"""\n        product = Product.objects.create(**self.product_data)\n        self.assertEqual(str(product), \'Test Product\')\n    \n    def test_product_slug_generation(self):\n        """Test automatic slug generation"""\n        product = Product.objects.create(**self.product_data)\n        self.assertEqual(product.slug, \'test-product\')\n    \n    def test_product_unique_sku(self):\n        """Test SKU uniqueness constraint"""\n        Product.objects.create(**self.product_data)\n        \n        duplicate_data = self.product_data.copy()\n        duplicate_data[\'name\'] = \'Duplicate Product\'\n        \n        with self.assertRaises(Exception):\n            Product.objects.create(**duplicate_data)\n    \n    def test_product_in_stock_property(self):\n        """Test in_stock property"""\n        product = Product.objects.create(**self.product_data)\n        self.assertTrue(product.in_stock)\n        \n        product.stock_quantity = 0\n        product.save()\n        self.assertFalse(product.in_stock)\n    \n    def test_product_average_rating(self):\n        """Test average rating calculation"""\n        product = Product.objects.create(**self.product_data)\n        user1 = User.objects.create_user(username=\'user1\', email=\'user1@test.com\', password=\'pass123\')\n        user2 = User.objects.create_user(username=\'user2\', email=\'user2@test.com\', password=\'pass123\')\n        \n        Review.objects.create(product=product, user=user1, rating=4, comment=\'Good product\')\n        Review.objects.create(product=product, user=user2, rating=5, comment=\'Excellent!\')\n        \n        self.assertEqual(product.average_rating, 4.5)\n\n\nclass CategoryModelTest(TestCase):\n    """Test cases for Category model"""\n    \n    def test_category_creation(self):\n        """Test category model creation"""\n        category = Category.objects.create(\n            name="Books",\n            description="Books and literature",\n            slug="books"\n        )\n        \n        self.assertEqual(category.name, "Books")\n        self.assertEqual(category.slug, "books")\n        self.assertTrue(category.is_active)\n    \n    def test_category_str_representation(self):\n        """' additional_kwargs={} response_metadata={'id': 'msg_01TCkowVAYKkP6hzbivaxqpm', 'model': 'claude-sonnet-4-20250514', 'stop_reason': 'max_tokens', 'stop_sequence': None, 'usage': {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 401, 'output_tokens': 1024, 'service_tier': 'standard'}} id='run--dd996bd7-80f7-4638-9a11-138149a70610-0' usage_metadata={'input_tokens': 401, 'output_tokens': 1024, 'total_tokens': 1425, 'input_token_details': {'cache_read': 0, 'cache_creation': 0}}
content='import pytest\nfrom decimal import Decimal\nfrom unittest.mock import patch, MagicMock\nfrom django.test import TestCase, TransactionTestCase\nfrom django.contrib.auth import get_user_model\nfrom django.core.exceptions import ValidationError\nfrom django.db import transaction\nfrom rest_framework.test import APITestCase, APIClient\nfrom rest_framework import status\nfrom orders.models import Order, OrderItem\nfrom orders.services import OrderService\nfrom products.models import Product, Category\nfrom payments.models import Payment\nfrom inventory.models import Inventory\n\nUser = get_user_model()\n\n\nclass OrderModelTestCase(TestCase):\n    """Test cases for Order model"""\n\n    def setUp(self):\n        """Set up test data"""\n        self.user = User.objects.create_user(\n            username=\'testuser\',\n            email=\'test@example.com\',\n            password=\'testpass123\'\n        )\n        \n        self.category = Category.objects.create(\n            name=\'Electronics\',\n            slug=\'electronics\'\n        )\n        \n        self.product = Product.objects.create(\n            name=\'Test Product\',\n            slug=\'test-product\',\n            description=\'Test product description\',\n            price=Decimal(\'99.99\'),\n            category=self.category,\n            is_active=True\n        )\n        \n        self.inventory = Inventory.objects.create(\n            product=self.product,\n            quantity=100,\n            reserved_quantity=0\n        )\n\n    def test_order_creation(self):\n        """Test basic order creation"""\n        order = Order.objects.create(\n            user=self.user,\n            status=\'pending\',\n            total_amount=Decimal(\'99.99\')\n        )\n        \n        self.assertEqual(order.user, self.user)\n        self.assertEqual(order.status, \'pending\')\n        self.assertEqual(order.total_amount, Decimal(\'99.99\'))\n        self.assertIsNotNone(order.order_number)\n        self.assertTrue(order.order_number.startswith(\'ORD-\'))\n\n    def test_order_item_creation(self):\n        """Test order item creation"""\n        order = Order.objects.create(\n            user=self.user,\n            status=\'pending\',\n            total_amount=Decimal(\'199.98\')\n        )\n        \n        order_item = OrderItem.objects.create(\n            order=order,\n            product=self.product,\n            quantity=2,\n            price=Decimal(\'99.99\')\n        )\n        \n        self.assertEqual(order_item.order, order)\n        self.assertEqual(order_item.product, self.product)\n        self.assertEqual(order_item.quantity, 2)\n        self.assertEqual(order_item.price, Decimal(\'99.99\'))\n        self.assertEqual(order_item.total_price, Decimal(\'199.98\'))\n\n    def test_order_total_calculation(self):\n        """Test order total calculation"""\n        order = Order.objects.create(\n            user=self.user,\n            status=\'pending\',\n            total_amount=Decimal(\'0.00\')\n        )\n        \n        # Add multiple items\n        OrderItem.objects.create(\n            order=order,\n            product=self.product,\n            quantity=2,\n            price=Decimal(\'99.99\')\n        )\n        \n        product2 = Product.objects.create(\n            name=\'Test Product 2\',\n            slug=\'test-product-2\',\n            description=\'Test product 2 description\',\n            price=Decimal(\'49.99\'),\n            category=self.category,\n            is_active=True\n        )\n        \n        OrderItem.objects.create(\n            order=order,\n            product=product2,\n            quantity=1,\n            price=Decimal(\'49.99\')\n        )\n        \n        order.calculate_total()\n        self.assertEqual(order.total_amount, Decimal(\'249.97\'))\n\n    def test_order_status_transitions(self):\n        """Test valid order status transitions"""\n        order = Order.objects.create(\n            user=self.user,\n            status=\'pending\',\n            total_amount=Decimal(\'99.99\')\n        )\n        \n        # Test valid transitions\n        order.status = \'confirme' additional_kwargs={} response_metadata={'id': 'msg_01DhuexsvpFiErRu8F52LMiT', 'model': 'claude-sonnet-4-20250514', 'stop_reason': 'max_tokens', 'stop_sequence': None, 'usage': {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 401, 'output_tokens': 1024, 'service_tier': 'standard'}} id='run--d681fbde-4287-4af4-a4d2-43dca76f28c3-0' usage_metadata={'input_tokens': 401, 'output_tokens': 1024, 'total_tokens': 1425, 'input_token_details': {'cache_read': 0, 'cache_creation': 0}}
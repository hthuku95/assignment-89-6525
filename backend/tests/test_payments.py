content='import pytest\nimport json\nimport stripe\nfrom decimal import Decimal\nfrom unittest.mock import patch, Mock, MagicMock\nfrom django.test import TestCase, TransactionTestCase\nfrom django.contrib.auth import get_user_model\nfrom django.urls import reverse\nfrom django.conf import settings\nfrom rest_framework.test import APITestCase, APIClient\nfrom rest_framework import status\nfrom rest_framework_simplejwt.tokens import RefreshToken\n\nfrom payments.models import Payment, PaymentMethod, Subscription\nfrom payments.services import PaymentService, StripeService\nfrom orders.models import Order, OrderItem\nfrom products.models import Product, Category\nfrom users.models import UserProfile\n\nUser = get_user_model()\n\n\nclass PaymentModelTest(TestCase):\n    """Test cases for Payment model"""\n    \n    def setUp(self):\n        self.user = User.objects.create_user(\n            username=\'testuser\',\n            email=\'test@example.com\',\n            password=\'testpass123\'\n        )\n        self.payment_method = PaymentMethod.objects.create(\n            user=self.user,\n            stripe_payment_method_id=\'pm_test123\',\n            type=\'card\',\n            last_four=\'4242\',\n            brand=\'visa\',\n            is_default=True\n        )\n        \n    def test_payment_creation(self):\n        """Test payment model creation"""\n        payment = Payment.objects.create(\n            user=self.user,\n            amount=Decimal(\'99.99\'),\n            currency=\'usd\',\n            status=\'pending\',\n            stripe_payment_intent_id=\'pi_test123\',\n            payment_method=self.payment_method\n        )\n        \n        self.assertEqual(payment.user, self.user)\n        self.assertEqual(payment.amount, Decimal(\'99.99\'))\n        self.assertEqual(payment.currency, \'usd\')\n        self.assertEqual(payment.status, \'pending\')\n        self.assertTrue(payment.created_at)\n        \n    def test_payment_string_representation(self):\n        """Test payment model string representation"""\n        payment = Payment.objects.create(\n            user=self.user,\n            amount=Decimal(\'50.00\'),\n            currency=\'usd\',\n            status=\'completed\'\n        )\n        \n        expected = f"Payment {payment.id} - ${payment.amount} - {payment.status}"\n        self.assertEqual(str(payment), expected)\n        \n    def test_payment_status_choices(self):\n        """Test payment status validation"""\n        valid_statuses = [\'pending\', \'processing\', \'completed\', \'failed\', \'cancelled\', \'refunded\']\n        \n        for status in valid_statuses:\n            payment = Payment.objects.create(\n                user=self.user,\n                amount=Decimal(\'25.00\'),\n                currency=\'usd\',\n                status=status\n            )\n            self.assertEqual(payment.status, status)\n\n\nclass PaymentMethodModelTest(TestCase):\n    """Test cases for PaymentMethod model"""\n    \n    def setUp(self):\n        self.user = User.objects.create_user(\n            username=\'testuser\',\n            email=\'test@example.com\',\n            password=\'testpass123\'\n        )\n        \n    def test_payment_method_creation(self):\n        """Test payment method creation"""\n        payment_method = PaymentMethod.objects.create(\n            user=self.user,\n            stripe_payment_method_id=\'pm_test456\',\n            type=\'card\',\n            last_four=\'1234\',\n            brand=\'mastercard\',\n            exp_month=12,\n            exp_year=2025,\n            is_default=False\n        )\n        \n        self.assertEqual(payment_method.user, self.user)\n        self.assertEqual(payment_method.type, \'card\')\n        self.assertEqual(payment_method.last_four, \'1234\')\n        self.assertEqual(payment_method.brand, \'mastercard\')\n        self.assertFalse(payment_method.is_default)\n        \n    def test_default_payment_method_enforcement(self):\n        """Test that only one default payment method exists per user"""\n        PaymentMethod.objects.create(\n            user=self.user,\n            ' additional_kwargs={} response_metadata={'id': 'msg_013rTmbKnk7Yn9uodAx5fcvf', 'model': 'claude-sonnet-4-20250514', 'stop_reason': 'max_tokens', 'stop_sequence': None, 'usage': {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 401, 'output_tokens': 1024, 'service_tier': 'standard'}} id='run--ccee70da-6754-4e00-9fdc-0f2d24d1c66c-0' usage_metadata={'input_tokens': 401, 'output_tokens': 1024, 'total_tokens': 1425, 'input_token_details': {'cache_read': 0, 'cache_creation': 0}}
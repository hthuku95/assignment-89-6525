content='import React, { useState, useEffect } from \'react\';\nimport { useDispatch, useSelector } from \'react-redux\';\nimport { toast } from \'react-toastify\';\nimport { addToCart } from \'../store/slices/cartSlice\';\nimport { fetchProducts } from \'../store/slices/productSlice\';\nimport LoadingSpinner from \'./LoadingSpinner\';\nimport \'./ProductList.css\';\n\nconst ProductList = ({ category = null, searchQuery = \'\', sortBy = \'name\' }) => {\n  const dispatch = useDispatch();\n  const { products, loading, error } = useSelector(state => state.products);\n  const { isAuthenticated } = useSelector(state => state.auth);\n  \n  const [filteredProducts, setFilteredProducts] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [productsPerPage] = useState(12);\n\n  useEffect(() => {\n    dispatch(fetchProducts());\n  }, [dispatch]);\n\n  useEffect(() => {\n    let filtered = [...products];\n\n    // Filter by category\n    if (category && category !== \'all\') {\n      filtered = filtered.filter(product => \n        product.category.toLowerCase() === category.toLowerCase()\n      );\n    }\n\n    // Filter by search query\n    if (searchQuery) {\n      filtered = filtered.filter(product =>\n        product.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        product.description.toLowerCase().includes(searchQuery.toLowerCase())\n      );\n    }\n\n    // Sort products\n    filtered.sort((a, b) => {\n      switch (sortBy) {\n        case \'price-low\':\n          return parseFloat(a.price) - parseFloat(b.price);\n        case \'price-high\':\n          return parseFloat(b.price) - parseFloat(a.price);\n        case \'rating\':\n          return (b.rating || 0) - (a.rating || 0);\n        case \'newest\':\n          return new Date(b.created_at) - new Date(a.created_at);\n        default:\n          return a.name.localeCompare(b.name);\n      }\n    });\n\n    setFilteredProducts(filtered);\n    setCurrentPage(1);\n  }, [products, category, searchQuery, sortBy]);\n\n  const handleAddToCart = async (product) => {\n    if (!isAuthenticated) {\n      toast.error(\'Please login to add items to cart\');\n      return;\n    }\n\n    try {\n      await dispatch(addToCart({ \n        productId: product.id, \n        quantity: 1 \n      })).unwrap();\n      toast.success(`${product.name} added to cart!`);\n    } catch (error) {\n      toast.error(error.message || \'Failed to add item to cart\');\n    }\n  };\n\n  const formatPrice = (price) => {\n    return new Intl.NumberFormat(\'en-US\', {\n      style: \'currency\',\n      currency: \'USD\'\n    }).format(price);\n  };\n\n  const renderStars = (rating) => {\n    const stars = [];\n    const fullStars = Math.floor(rating || 0);\n    const hasHalfStar = (rating || 0) % 1 !== 0;\n\n    for (let i = 0; i < 5; i++) {\n      if (i < fullStars) {\n        stars.push(<span key={i} className="star filled">★</span>);\n      } else if (i === fullStars && hasHalfStar) {\n        stars.push(<span key={i} className="star half">★</span>);\n      } else {\n        stars.push(<span key={i} className="star empty">☆</span>);\n      }\n    }\n    return stars;\n  };\n\n  // Pagination\n  const indexOfLastProduct = currentPage * productsPerPage;\n  const indexOfFirstProduct = indexOfLastProduct - productsPerPage;\n  const currentProducts = filteredProducts.slice(indexOfFirstProduct, indexOfLastProduct);\n  const totalPages = Math.ceil(filteredProducts.length / productsPerPage);\n\n  const paginate = (page' additional_kwargs={} response_metadata={'id': 'msg_01X6AYoJWvuodYKzva99DnHh', 'model': 'claude-sonnet-4-20250514', 'stop_reason': 'max_tokens', 'stop_sequence': None, 'usage': {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 358, 'output_tokens': 1024, 'service_tier': 'standard'}} id='run--1ba81022-2f8b-4019-a0d3-5952d3bdabe5-0' usage_metadata={'input_tokens': 358, 'output_tokens': 1024, 'total_tokens': 1382, 'input_token_details': {'cache_read': 0, 'cache_creation': 0}}